using ModComponent.Behaviours;
using ModComponent.Components;
using System.Linq;

namespace ModComponent.SDK
{
    internal class DataSerializer
    {
        internal static object SerializeBlueprint(object blueprint)
        {
            return blueprint switch
            {
                //ModRecipe modRecipe => new
                //{
                //    modRecipe.RecipeName,
                //    modRecipe.RecipeDescription,
                //    RecipeIcon = modRecipe.RecipeIcon?.Icon.name ?? "",
                //    modRecipe.RequiredSkillLevel,
                //    AllowedCookingPots = modRecipe.AllowedCookingPots?.Select(pot => pot.name).ToArray() ?? new string[0],
                //    BlueprintData = new
                //    {
                //        modRecipe.Name,
                //        RequiredGear = modRecipe.RequiredGear?.Zip(modRecipe.RequiredGearUnits,
                //    (gear, count) => new { Item = gear.name, Count = count }).ToArray(),
                //        modRecipe.KeroseneLitersRequired,
                //        modRecipe.GunpowderKGRequired,
                //        CraftedResult = modRecipe.CraftedResult?.name ?? "",
                //        modRecipe.CraftedResultCount,
                //        modRecipe.DurationMinutes,
                //        CraftingAudio = modRecipe.CraftingAudio?.name ?? ""
                //    }
                //},
                ModBlueprint modBlueprint => new
                {
                    modBlueprint.Name,
                    RequiredGear = modBlueprint.RequiredGear?.Select(g => new { Item = g.GearItem.name, g.Count }).ToArray(),
                    modBlueprint.KeroseneLitersRequired,
                    modBlueprint.GunpowderKGRequired,
                    RequiredTool = modBlueprint.RequiredTool?.name ?? "",
                    OptionalTools = modBlueprint.OptionalTools?.Select(tool => tool.name).ToArray(),
                    RequiredCraftingLocation = modBlueprint.RequiredCraftingLocation.ToString(),
                    modBlueprint.RequiresLitFire,
                    modBlueprint.RequiresLight,
                    CraftedResult = modBlueprint.CraftedResult?.name ?? "",
                    modBlueprint.CraftedResultCount,
                    modBlueprint.DurationMinutes,
                    CraftingAudio = modBlueprint.CraftingAudio?.name ?? "",
                    AppliedSkill = modBlueprint.AppliedSkill.ToString(),
                    ImprovedSkill = modBlueprint.ImprovedSkill.ToString()
                },
                _ => blueprint
            };
        }

        internal static object SerializeComponent(object component)
        {
            return component switch
            {
                ModAmmoComponent modAmmoComponent => new
                {
                    modAmmoComponent.DisplayNameLocalizationId,
                    modAmmoComponent.DescriptionLocalizatonId,
                    modAmmoComponent.InventoryActionLocalizationId,
                    modAmmoComponent.WeightKG,
                    modAmmoComponent.DaysToDecay,
                    modAmmoComponent.MaxHP,
                    InitialCondition = modAmmoComponent.InitialCondition.ToString(),
                    InventoryCategory = modAmmoComponent.InventoryCategory.ToString(),
                    modAmmoComponent.PickUpAudio,
                    modAmmoComponent.PutBackAudio,
                    modAmmoComponent.StowAudio,
                    modAmmoComponent.WornOutAudio,
                    modAmmoComponent.InspectOnPickup,
                    modAmmoComponent.InspectDistance,
                    InspectAngles = new float[] { modAmmoComponent.InspectAngles.x, modAmmoComponent.InspectAngles.y, modAmmoComponent.InspectAngles.z },
                    InspectOffset = new float[] { modAmmoComponent.InspectOffset.x, modAmmoComponent.InspectOffset.y, modAmmoComponent.InspectOffset.z },
                    InspectScale = new float[] { modAmmoComponent.InspectScale.x, modAmmoComponent.InspectScale.y, modAmmoComponent.InspectScale.z },
                    modAmmoComponent.NormalModel,
                    modAmmoComponent.InspectModel,

                    AmmoForGunType = modAmmoComponent.AmmoForGunType.ToString()
                },
                ModBedComponent modBedComponent => new
                {
                    modBedComponent.DisplayNameLocalizationId,
                    modBedComponent.DescriptionLocalizatonId,
                    modBedComponent.InventoryActionLocalizationId,
                    modBedComponent.WeightKG,
                    modBedComponent.DaysToDecay,
                    modBedComponent.MaxHP,
                    InitialCondition = modBedComponent.InitialCondition.ToString(),
                    InventoryCategory = modBedComponent.InventoryCategory.ToString(),
                    modBedComponent.PickUpAudio,
                    modBedComponent.PutBackAudio,
                    modBedComponent.StowAudio,
                    modBedComponent.WornOutAudio,
                    modBedComponent.InspectOnPickup,
                    modBedComponent.InspectDistance,
                    InspectAngles = new float[] { modBedComponent.InspectAngles.x, modBedComponent.InspectAngles.y, modBedComponent.InspectAngles.z },
                    InspectOffset = new float[] { modBedComponent.InspectOffset.x, modBedComponent.InspectOffset.y, modBedComponent.InspectOffset.z },
                    InspectScale = new float[] { modBedComponent.InspectScale.x, modBedComponent.InspectScale.y, modBedComponent.InspectScale.z },
                    modBedComponent.NormalModel,
                    modBedComponent.InspectModel,

                    modBedComponent.ConditionGainPerHour,
                    modBedComponent.AdditionalConditionGainPerHour,
                    modBedComponent.WarmthBonusCelsius,
                    modBedComponent.DegradePerHour,
                    modBedComponent.BearAttackModifier,
                    modBedComponent.WolfAttackModifier,
                    OpenAudio = modBedComponent.OpenAudio?.name ?? "",
                    CloseAudio = modBedComponent.CloseAudio?.name ?? "",
                    PackedMesh = modBedComponent.PackedMesh != null ? modBedComponent.NormalModel.name : "",
                    UsableMesh = modBedComponent.UsableMesh != null ? modBedComponent.NormalModel.name : "",
                },
                ModBodyHarvestComponent modBodyHarvestComponent => new
                {
                    modBodyHarvestComponent.DisplayNameLocalizationId,
                    modBodyHarvestComponent.DescriptionLocalizatonId,
                    modBodyHarvestComponent.InventoryActionLocalizationId,
                    modBodyHarvestComponent.WeightKG,
                    modBodyHarvestComponent.DaysToDecay,
                    modBodyHarvestComponent.MaxHP,
                    InitialCondition = modBodyHarvestComponent.InitialCondition.ToString(),
                    InventoryCategory = modBodyHarvestComponent.InventoryCategory.ToString(),
                    modBodyHarvestComponent.PickUpAudio,
                    modBodyHarvestComponent.PutBackAudio,
                    modBodyHarvestComponent.StowAudio,
                    modBodyHarvestComponent.WornOutAudio,
                    modBodyHarvestComponent.InspectOnPickup,
                    modBodyHarvestComponent.InspectDistance,
                    InspectAngles = new float[] { modBodyHarvestComponent.InspectAngles.x, modBodyHarvestComponent.InspectAngles.y, modBodyHarvestComponent.InspectAngles.z },
                    InspectOffset = new float[] { modBodyHarvestComponent.InspectOffset.x, modBodyHarvestComponent.InspectOffset.y, modBodyHarvestComponent.InspectOffset.z },
                    InspectScale = new float[] { modBodyHarvestComponent.InspectScale.x, modBodyHarvestComponent.InspectScale.y, modBodyHarvestComponent.InspectScale.z },
                    modBodyHarvestComponent.NormalModel,
                    modBodyHarvestComponent.InspectModel,

                    modBodyHarvestComponent.CanCarry,
                    HarvestAudio = modBodyHarvestComponent.HarvestAudio?.name ?? "",
                    GutPrefab = modBodyHarvestComponent.GutPrefab?.name ?? "",
                    modBodyHarvestComponent.GutQuantity,
                    modBodyHarvestComponent.GutWeightKgPerUnit,
                    HidePrefab = modBodyHarvestComponent.HidePrefab?.name ?? "",
                    modBodyHarvestComponent.HideQuantity,
                    modBodyHarvestComponent.HideWeightKgPerUnit,
                    MeatPrefab = modBodyHarvestComponent.MeatPrefab?.name ?? "",
                    modBodyHarvestComponent.MeatAvailableMinKG,
                    modBodyHarvestComponent.MeatAvailableMaxKG
                },
                ModCharcoalComponent modCharcoalComponent => new
                {
                    modCharcoalComponent.DisplayNameLocalizationId,
                    modCharcoalComponent.DescriptionLocalizatonId,
                    modCharcoalComponent.InventoryActionLocalizationId,
                    modCharcoalComponent.WeightKG,
                    modCharcoalComponent.DaysToDecay,
                    modCharcoalComponent.MaxHP,
                    InitialCondition = modCharcoalComponent.InitialCondition.ToString(),
                    InventoryCategory = modCharcoalComponent.InventoryCategory.ToString(),
                    modCharcoalComponent.PickUpAudio,
                    modCharcoalComponent.PutBackAudio,
                    modCharcoalComponent.StowAudio,
                    modCharcoalComponent.WornOutAudio,
                    modCharcoalComponent.InspectOnPickup,
                    modCharcoalComponent.InspectDistance,
                    InspectAngles = new float[] { modCharcoalComponent.InspectAngles.x, modCharcoalComponent.InspectAngles.y, modCharcoalComponent.InspectAngles.z },
                    InspectOffset = new float[] { modCharcoalComponent.InspectOffset.x, modCharcoalComponent.InspectOffset.y, modCharcoalComponent.InspectOffset.z },
                    InspectScale = new float[] { modCharcoalComponent.InspectScale.x, modCharcoalComponent.InspectScale.y, modCharcoalComponent.InspectScale.z },

                    modCharcoalComponent.SurveyGameMinutes,
                    modCharcoalComponent.SurveyRealSeconds,
                    modCharcoalComponent.SurveySkillExtendedHours,
                    SurveyLoopAudio = modCharcoalComponent.SurveyLoopAudio?.name ?? ""
                },
                ModClothingComponent modClothingComponent => new
                {
                    modClothingComponent.DisplayNameLocalizationId,
                    modClothingComponent.DescriptionLocalizatonId,
                    modClothingComponent.InventoryActionLocalizationId,
                    modClothingComponent.WeightKG,
                    modClothingComponent.DaysToDecay,
                    modClothingComponent.MaxHP,
                    InitialCondition = modClothingComponent.InitialCondition.ToString(),
                    InventoryCategory = modClothingComponent.InventoryCategory.ToString(),
                    modClothingComponent.PickUpAudio,
                    modClothingComponent.PutBackAudio,
                    modClothingComponent.StowAudio,
                    modClothingComponent.WornOutAudio,
                    modClothingComponent.InspectOnPickup,
                    modClothingComponent.InspectDistance,
                    InspectAngles = new float[] { modClothingComponent.InspectAngles.x, modClothingComponent.InspectAngles.y, modClothingComponent.InspectAngles.z },
                    InspectOffset = new float[] { modClothingComponent.InspectOffset.x, modClothingComponent.InspectOffset.y, modClothingComponent.InspectOffset.z },
                    InspectScale = new float[] { modClothingComponent.InspectScale.x, modClothingComponent.InspectScale.y, modClothingComponent.InspectScale.z },
                    modClothingComponent.NormalModel,
                    modClothingComponent.InspectModel,
                    Region = modClothingComponent.Region.ToString(),
                    MinLayer = modClothingComponent.MinLayer.ToString(),
                    MaxLayer = modClothingComponent.MaxLayer.ToString(),
                    MovementSound = modClothingComponent.MovementSound.ToString(),
                    Footwear = modClothingComponent.Footwear.ToString(),
                    modClothingComponent.DaysToDecayWornOutside,
                    modClothingComponent.DaysToDecayWornInside,
                    modClothingComponent.Warmth,
                    modClothingComponent.WarmthWhenWet,
                    modClothingComponent.Windproof,
                    modClothingComponent.Waterproofness,
                    modClothingComponent.Toughness,
                    modClothingComponent.SprintBarReduction,
                    modClothingComponent.DecreaseAttackChance,
                    modClothingComponent.IncreaseFleeChance,
                    modClothingComponent.HoursToDryNearFire,
                    modClothingComponent.HoursToDryWithoutFire,
                    modClothingComponent.HoursToFreeze,
                    modClothingComponent.MainTexture,
                    modClothingComponent.BlendTexture,
                    modClothingComponent.DrawLayer,
                    modClothingComponent.ImplementationType
                },
                ModCollectibleComponent modCollectibleComponent => new
                {
                    modCollectibleComponent.DisplayNameLocalizationId,
                    modCollectibleComponent.DescriptionLocalizatonId,
                    modCollectibleComponent.InventoryActionLocalizationId,
                    modCollectibleComponent.WeightKG,
                    modCollectibleComponent.DaysToDecay,
                    modCollectibleComponent.MaxHP,
                    InitialCondition = modCollectibleComponent.InitialCondition.ToString(),
                    InventoryCategory = modCollectibleComponent.InventoryCategory.ToString(),
                    modCollectibleComponent.PickUpAudio,
                    modCollectibleComponent.PutBackAudio,
                    modCollectibleComponent.StowAudio,
                    modCollectibleComponent.WornOutAudio,
                    modCollectibleComponent.InspectOnPickup,
                    modCollectibleComponent.InspectDistance,
                    InspectAngles = new float[] { modCollectibleComponent.InspectAngles.x, modCollectibleComponent.InspectAngles.y, modCollectibleComponent.InspectAngles.z },
                    InspectOffset = new float[] { modCollectibleComponent.InspectOffset.x, modCollectibleComponent.InspectOffset.y, modCollectibleComponent.InspectOffset.z },
                    InspectScale = new float[] { modCollectibleComponent.InspectScale.x, modCollectibleComponent.InspectScale.y, modCollectibleComponent.InspectScale.z },

                    modCollectibleComponent.HudMessageLocalizationId,
                    modCollectibleComponent.NarrativeTextLocalizationId,
                    TextAlignment = modCollectibleComponent.TextAlignment.ToString(),
                },
                ModFoodComponent modFoodComponent => new
                {
                    modFoodComponent.DisplayNameLocalizationId,
                    modFoodComponent.DescriptionLocalizatonId,
                    modFoodComponent.InventoryActionLocalizationId,
                    modFoodComponent.WeightKG,
                    modFoodComponent.DaysToDecay,
                    modFoodComponent.MaxHP,
                    InitialCondition = modFoodComponent.InitialCondition.ToString(),
                    InventoryCategory = modFoodComponent.InventoryCategory.ToString(),
                    modFoodComponent.PickUpAudio,
                    modFoodComponent.PutBackAudio,
                    modFoodComponent.StowAudio,
                    modFoodComponent.WornOutAudio,
                    modFoodComponent.InspectOnPickup,
                    modFoodComponent.InspectDistance,
                    InspectAngles = new float[] { modFoodComponent.InspectAngles.x, modFoodComponent.InspectAngles.y, modFoodComponent.InspectAngles.z },
                    InspectOffset = new float[] { modFoodComponent.InspectOffset.x, modFoodComponent.InspectOffset.y, modFoodComponent.InspectOffset.z },
                    InspectScale = new float[] { modFoodComponent.InspectScale.x, modFoodComponent.InspectScale.y, modFoodComponent.InspectScale.z },
                    modFoodComponent.NormalModel,
                    modFoodComponent.InspectModel,

                    modFoodComponent.Cooking,
                    modFoodComponent.CookingMinutes,
                    modFoodComponent.CookingUnitsRequired,
                    modFoodComponent.CookingWaterRequired,
                    modFoodComponent.CookingResult,
                    modFoodComponent.BurntMinutes,
                    Type = modFoodComponent.Type.ToString(),
                    modFoodComponent.CookingAudio,
                    modFoodComponent.StartCookingAudio,

                    modFoodComponent.DaysToDecayOutdoors,
                    modFoodComponent.DaysToDecayIndoors,
                    modFoodComponent.Calories,
                    modFoodComponent.Servings,
                    modFoodComponent.EatingTime,
                    EatingAudio = modFoodComponent.EatingAudio?.name ?? "",
                    EatingPackagedAudio = modFoodComponent.EatingPackagedAudio?.name ?? "",
                    modFoodComponent.ThirstEffect,
                    modFoodComponent.FoodPoisoning,
                    modFoodComponent.FoodPoisoningLowCondition,
                    modFoodComponent.ParasiteRiskIncrements,
                    modFoodComponent.Natural,
                    modFoodComponent.Raw,
                    modFoodComponent.Drink,
                    modFoodComponent.Meat,
                    modFoodComponent.Fish,
                    modFoodComponent.Canned,
                    modFoodComponent.Opening,
                    modFoodComponent.OpeningWithCanOpener,
                    modFoodComponent.OpeningWithKnife,
                    modFoodComponent.OpeningWithHatchet,
                    modFoodComponent.OpeningWithSmashing,
                    modFoodComponent.AffectCondition,
                    modFoodComponent.ConditionRestBonus,
                    modFoodComponent.ConditionRestMinutes,
                    modFoodComponent.AffectRest,
                    modFoodComponent.InstantRestChange,
                    modFoodComponent.RestFactorMinutes,
                    modFoodComponent.AffectCold,
                    modFoodComponent.InstantColdChange,
                    modFoodComponent.ColdFactorMinutes,
                    modFoodComponent.ContainsAlcohol,
                    modFoodComponent.AlcoholPercentage,
                    modFoodComponent.AlcoholUptakeMinutes,
                    modFoodComponent.VitaminC
                },
                ModCookableComponent modCookableComponent => new
                {
                    modCookableComponent.DisplayNameLocalizationId,
                    modCookableComponent.DescriptionLocalizatonId,
                    modCookableComponent.InventoryActionLocalizationId,
                    modCookableComponent.WeightKG,
                    modCookableComponent.DaysToDecay,
                    modCookableComponent.MaxHP,
                    InitialCondition = modCookableComponent.InitialCondition.ToString(),
                    InventoryCategory = modCookableComponent.InventoryCategory.ToString(),
                    modCookableComponent.PickUpAudio,
                    modCookableComponent.PutBackAudio,
                    modCookableComponent.StowAudio,
                    modCookableComponent.WornOutAudio,
                    modCookableComponent.InspectOnPickup,
                    modCookableComponent.InspectDistance,
                    InspectAngles = new float[] { modCookableComponent.InspectAngles.x, modCookableComponent.InspectAngles.y, modCookableComponent.InspectAngles.z },
                    InspectOffset = new float[] { modCookableComponent.InspectOffset.x, modCookableComponent.InspectOffset.y, modCookableComponent.InspectOffset.z },
                    InspectScale = new float[] { modCookableComponent.InspectScale.x, modCookableComponent.InspectScale.y, modCookableComponent.InspectScale.z },

                    modCookableComponent.Cooking,
                    modCookableComponent.CookingMinutes,
                    modCookableComponent.CookingUnitsRequired,
                    modCookableComponent.CookingWaterRequired,
                    CookingResult = modCookableComponent.CookingResult?.name ?? "",
                    modCookableComponent.BurntMinutes,
                    Type = modCookableComponent.Type.ToString(),
                    CookingAudio = modCookableComponent.CookingAudio?.name ?? "",
                    StartCookingAudio = modCookableComponent.StartCookingAudio?.name ?? ""
                },
                ModCookingPotComponent modCookingPotComponent => new
                {
                    modCookingPotComponent.DisplayNameLocalizationId,
                    modCookingPotComponent.DescriptionLocalizatonId,
                    modCookingPotComponent.InventoryActionLocalizationId,
                    modCookingPotComponent.WeightKG,
                    modCookingPotComponent.DaysToDecay,
                    modCookingPotComponent.MaxHP,
                    InitialCondition = modCookingPotComponent.InitialCondition.ToString(),
                    InventoryCategory = modCookingPotComponent.InventoryCategory.ToString(),
                    modCookingPotComponent.PickUpAudio,
                    modCookingPotComponent.PutBackAudio,
                    modCookingPotComponent.StowAudio,
                    modCookingPotComponent.WornOutAudio,
                    modCookingPotComponent.InspectOnPickup,
                    modCookingPotComponent.InspectDistance,
                    InspectAngles = new float[] { modCookingPotComponent.InspectAngles.x, modCookingPotComponent.InspectAngles.y, modCookingPotComponent.InspectAngles.z },
                    InspectOffset = new float[] { modCookingPotComponent.InspectOffset.x, modCookingPotComponent.InspectOffset.y, modCookingPotComponent.InspectOffset.z },
                    InspectScale = new float[] { modCookingPotComponent.InspectScale.x, modCookingPotComponent.InspectScale.y, modCookingPotComponent.InspectScale.z },

                    modCookingPotComponent.CanCookLiquid,
                    modCookingPotComponent.CanCookGrub,
                    modCookingPotComponent.CanCookMeat,
                    modCookingPotComponent.Capacity,
                    Template = modCookingPotComponent.Template?.name ?? ""
                },
                ModFirstAidComponent modFirstAidComponent => new
                {
                    modFirstAidComponent.DisplayNameLocalizationId,
                    modFirstAidComponent.DescriptionLocalizatonId,
                    modFirstAidComponent.InventoryActionLocalizationId,
                    modFirstAidComponent.WeightKG,
                    modFirstAidComponent.DaysToDecay,
                    modFirstAidComponent.MaxHP,
                    InitialCondition = modFirstAidComponent.InitialCondition.ToString(),
                    InventoryCategory = modFirstAidComponent.InventoryCategory.ToString(),
                    modFirstAidComponent.PickUpAudio,
                    modFirstAidComponent.PutBackAudio,
                    modFirstAidComponent.StowAudio,
                    modFirstAidComponent.WornOutAudio,
                    modFirstAidComponent.InspectOnPickup,
                    modFirstAidComponent.InspectDistance,
                    InspectAngles = new float[] { modFirstAidComponent.InspectAngles.x, modFirstAidComponent.InspectAngles.y, modFirstAidComponent.InspectAngles.z },
                    InspectOffset = new float[] { modFirstAidComponent.InspectOffset.x, modFirstAidComponent.InspectOffset.y, modFirstAidComponent.InspectOffset.z },
                    InspectScale = new float[] { modFirstAidComponent.InspectScale.x, modFirstAidComponent.InspectScale.y, modFirstAidComponent.InspectScale.z },

                    modFirstAidComponent.ProgressBarMessage,
                    modFirstAidComponent.RemedyText,
                    modFirstAidComponent.InstantHealing,
                    FirstAidType = modFirstAidComponent.FirstAidType.ToString(),
                    modFirstAidComponent.TimeToUseSeconds,
                    modFirstAidComponent.UnitsPerUse,
                    UseAudio = modFirstAidComponent.UseAudio?.name ?? ""
                },
                ModToolComponent modToolComponent => new
                {
                    modToolComponent.DisplayNameLocalizationId,
                    modToolComponent.DescriptionLocalizatonId,
                    modToolComponent.InventoryActionLocalizationId,
                    modToolComponent.WeightKG,
                    modToolComponent.DaysToDecay,
                    modToolComponent.MaxHP,
                    InitialCondition = modToolComponent.InitialCondition.ToString(),
                    InventoryCategory = modToolComponent.InventoryCategory.ToString(),
                    modToolComponent.PickUpAudio,
                    modToolComponent.PutBackAudio,
                    modToolComponent.StowAudio,
                    modToolComponent.WornOutAudio,
                    modToolComponent.InspectOnPickup,
                    modToolComponent.InspectDistance,
                    InspectAngles = new float[] { modToolComponent.InspectAngles.x, modToolComponent.InspectAngles.y, modToolComponent.InspectAngles.z },
                    InspectOffset = new float[] { modToolComponent.InspectOffset.x, modToolComponent.InspectOffset.y, modToolComponent.InspectOffset.z },
                    InspectScale = new float[] { modToolComponent.InspectScale.x, modToolComponent.InspectScale.y, modToolComponent.InspectScale.z },

                    EquippedModelPrefab = modToolComponent.EquippedModelPrefab != null ? modToolComponent.EquippedModelPrefab.name : "",
                    modToolComponent.ImplementationType,
                    modToolComponent.EquippingAudio,

                    ToolType = modToolComponent.ToolType.ToString(),
                    ToolKind = modToolComponent.ToolKind.ToString(),
                    modToolComponent.DegradeOnUse,
                    Usage = modToolComponent.Usage.ToString(),
                    modToolComponent.SkillBonus,
                    modToolComponent.CraftingTimeMultiplier,
                    modToolComponent.DegradePerHourCrafting,
                    modToolComponent.BreakDown,
                    modToolComponent.BreakDownTimeMultiplier,
                    modToolComponent.ForceLocks,
                    ForceLockAudio = modToolComponent.ForceLockAudio?.name ?? "",
                    modToolComponent.IceFishingHole,
                    modToolComponent.IceFishingHoleDegradeOnUse,
                    modToolComponent.IceFishingHoleMinutes,
                    IceFishingHoleAudio = modToolComponent.IceFishingHoleAudio?.name ?? "",
                    modToolComponent.CarcassHarvesting,
                    modToolComponent.MinutesPerKgMeat,
                    modToolComponent.MinutesPerKgFrozenMeat,
                    modToolComponent.MinutesPerHide,
                    modToolComponent.MinutesPerGut,
                    modToolComponent.DegradePerHourHarvesting,
                    modToolComponent.StruggleBonus,
                    modToolComponent.DamageMultiplier,
                    modToolComponent.FleeChanceMultiplier,
                    modToolComponent.TapMultiplier,
                    modToolComponent.CanPuncture,
                    modToolComponent.BleedoutMultiplier
                },
                ModGenericEquippableComponent modGenericEquippableComponent => new
                {
                    modGenericEquippableComponent.DisplayNameLocalizationId,
                    modGenericEquippableComponent.DescriptionLocalizatonId,
                    modGenericEquippableComponent.InventoryActionLocalizationId,
                    modGenericEquippableComponent.WeightKG,
                    modGenericEquippableComponent.DaysToDecay,
                    modGenericEquippableComponent.MaxHP,
                    InitialCondition = modGenericEquippableComponent.InitialCondition.ToString(),
                    InventoryCategory = modGenericEquippableComponent.InventoryCategory.ToString(),
                    modGenericEquippableComponent.PickUpAudio,
                    modGenericEquippableComponent.PutBackAudio,
                    modGenericEquippableComponent.StowAudio,
                    modGenericEquippableComponent.WornOutAudio,
                    modGenericEquippableComponent.InspectOnPickup,
                    modGenericEquippableComponent.InspectDistance,
                    InspectAngles = new float[] { modGenericEquippableComponent.InspectAngles.x, modGenericEquippableComponent.InspectAngles.y, modGenericEquippableComponent.InspectAngles.z },
                    InspectOffset = new float[] { modGenericEquippableComponent.InspectOffset.x, modGenericEquippableComponent.InspectOffset.y, modGenericEquippableComponent.InspectOffset.z },
                    InspectScale = new float[] { modGenericEquippableComponent.InspectScale.x, modGenericEquippableComponent.InspectScale.y, modGenericEquippableComponent.InspectScale.z },

                    EquippedModelPrefab = modGenericEquippableComponent.EquippedModelPrefab?.name ?? "",
                    modGenericEquippableComponent.ImplementationType,
                    EquippingAudio = modGenericEquippableComponent.EquippingAudio?.name ?? ""
                },
                ModLiquidComponent modLiquidComponent => new
                {
                    modLiquidComponent.DisplayNameLocalizationId,
                    modLiquidComponent.DescriptionLocalizatonId,
                    modLiquidComponent.InventoryActionLocalizationId,
                    modLiquidComponent.WeightKG,
                    modLiquidComponent.DaysToDecay,
                    modLiquidComponent.MaxHP,
                    InitialCondition = modLiquidComponent.InitialCondition.ToString(),
                    InventoryCategory = modLiquidComponent.InventoryCategory.ToString(),
                    modLiquidComponent.PickUpAudio,
                    modLiquidComponent.PutBackAudio,
                    modLiquidComponent.StowAudio,
                    modLiquidComponent.WornOutAudio,
                    modLiquidComponent.InspectOnPickup,
                    modLiquidComponent.InspectDistance,
                    InspectAngles = new float[] { modLiquidComponent.InspectAngles.x, modLiquidComponent.InspectAngles.y, modLiquidComponent.InspectAngles.z },
                    InspectOffset = new float[] { modLiquidComponent.InspectOffset.x, modLiquidComponent.InspectOffset.y, modLiquidComponent.InspectOffset.z },
                    InspectScale = new float[] { modLiquidComponent.InspectScale.x, modLiquidComponent.InspectScale.y, modLiquidComponent.InspectScale.z },

                    LiquidType = modLiquidComponent.LiquidType.ToString(),
                    modLiquidComponent.LiquidCapacityLiters,
                    modLiquidComponent.RandomizedQuantity,
                    modLiquidComponent.LiquidLiters
                },
                ModPowderComponent modPowderComponent => new
                {
                    modPowderComponent.DisplayNameLocalizationId,
                    modPowderComponent.DescriptionLocalizatonId,
                    modPowderComponent.InventoryActionLocalizationId,
                    modPowderComponent.WeightKG,
                    modPowderComponent.DaysToDecay,
                    modPowderComponent.MaxHP,
                    InitialCondition = modPowderComponent.InitialCondition.ToString(),
                    InventoryCategory = modPowderComponent.InventoryCategory.ToString(),
                    modPowderComponent.PickUpAudio,
                    modPowderComponent.PutBackAudio,
                    modPowderComponent.StowAudio,
                    modPowderComponent.WornOutAudio,
                    modPowderComponent.InspectOnPickup,
                    modPowderComponent.InspectDistance,
                    InspectAngles = new float[] { modPowderComponent.InspectAngles.x, modPowderComponent.InspectAngles.y, modPowderComponent.InspectAngles.z },
                    InspectOffset = new float[] { modPowderComponent.InspectOffset.x, modPowderComponent.InspectOffset.y, modPowderComponent.InspectOffset.z },
                    InspectScale = new float[] { modPowderComponent.InspectScale.x, modPowderComponent.InspectScale.y, modPowderComponent.InspectScale.z },

                    PowderType = modPowderComponent.PowderType.ToString(),
                    modPowderComponent.CapacityKG,
                    modPowderComponent.ChanceFull
                },
                ModPurificationComponent modPurificationComponent => new
                {
                    modPurificationComponent.DisplayNameLocalizationId,
                    modPurificationComponent.DescriptionLocalizatonId,
                    modPurificationComponent.InventoryActionLocalizationId,
                    modPurificationComponent.WeightKG,
                    modPurificationComponent.DaysToDecay,
                    modPurificationComponent.MaxHP,
                    InitialCondition = modPurificationComponent.InitialCondition.ToString(),
                    InventoryCategory = modPurificationComponent.InventoryCategory.ToString(),
                    modPurificationComponent.PickUpAudio,
                    modPurificationComponent.PutBackAudio,
                    modPurificationComponent.StowAudio,
                    modPurificationComponent.WornOutAudio,
                    modPurificationComponent.InspectOnPickup,
                    modPurificationComponent.InspectDistance,
                    InspectAngles = new float[] { modPurificationComponent.InspectAngles.x, modPurificationComponent.InspectAngles.y, modPurificationComponent.InspectAngles.z },
                    InspectOffset = new float[] { modPurificationComponent.InspectOffset.x, modPurificationComponent.InspectOffset.y, modPurificationComponent.InspectOffset.z },
                    InspectScale = new float[] { modPurificationComponent.InspectScale.x, modPurificationComponent.InspectScale.y, modPurificationComponent.InspectScale.z },

                    modPurificationComponent.LitersPurify,
                    modPurificationComponent.ProgressBarDurationSeconds,
                    modPurificationComponent.ProgressBarLocalizationID,
                    PurifyAudio = modPurificationComponent.PurifyAudio?.name ?? ""
                },
                ModRandomItemComponent modRandomItemComponent => new
                {
                    modRandomItemComponent.DisplayNameLocalizationId,
                    modRandomItemComponent.DescriptionLocalizatonId,
                    modRandomItemComponent.InventoryActionLocalizationId,
                    modRandomItemComponent.WeightKG,
                    modRandomItemComponent.DaysToDecay,
                    modRandomItemComponent.MaxHP,
                    InitialCondition = modRandomItemComponent.InitialCondition.ToString(),
                    InventoryCategory = modRandomItemComponent.InventoryCategory.ToString(),
                    modRandomItemComponent.PickUpAudio,
                    modRandomItemComponent.PutBackAudio,
                    modRandomItemComponent.StowAudio,
                    modRandomItemComponent.WornOutAudio,
                    modRandomItemComponent.InspectOnPickup,
                    modRandomItemComponent.InspectDistance,
                    InspectAngles = new float[] { modRandomItemComponent.InspectAngles.x, modRandomItemComponent.InspectAngles.y, modRandomItemComponent.InspectAngles.z },
                    InspectOffset = new float[] { modRandomItemComponent.InspectOffset.x, modRandomItemComponent.InspectOffset.y, modRandomItemComponent.InspectOffset.z },
                    InspectScale = new float[] { modRandomItemComponent.InspectScale.x, modRandomItemComponent.InspectScale.y, modRandomItemComponent.InspectScale.z },

                    ItemNames = modRandomItemComponent.ItemNames?.Select(gear => gear.name).ToArray(),
                },
                ModRandomWeightedItemComponent modRandomWeightedItemComponent => new
                {
                    modRandomWeightedItemComponent.DisplayNameLocalizationId,
                    modRandomWeightedItemComponent.DescriptionLocalizatonId,
                    modRandomWeightedItemComponent.InventoryActionLocalizationId,
                    modRandomWeightedItemComponent.WeightKG,
                    modRandomWeightedItemComponent.DaysToDecay,
                    modRandomWeightedItemComponent.MaxHP,
                    InitialCondition = modRandomWeightedItemComponent.InitialCondition.ToString(),
                    InventoryCategory = modRandomWeightedItemComponent.InventoryCategory.ToString(),
                    modRandomWeightedItemComponent.PickUpAudio,
                    modRandomWeightedItemComponent.PutBackAudio,
                    modRandomWeightedItemComponent.StowAudio,
                    modRandomWeightedItemComponent.WornOutAudio,
                    modRandomWeightedItemComponent.InspectOnPickup,
                    modRandomWeightedItemComponent.InspectDistance,
                    InspectAngles = new float[] { modRandomWeightedItemComponent.InspectAngles.x, modRandomWeightedItemComponent.InspectAngles.y, modRandomWeightedItemComponent.InspectAngles.z },
                    InspectOffset = new float[] { modRandomWeightedItemComponent.InspectOffset.x, modRandomWeightedItemComponent.InspectOffset.y, modRandomWeightedItemComponent.InspectOffset.z },
                    InspectScale = new float[] { modRandomWeightedItemComponent.InspectScale.x, modRandomWeightedItemComponent.InspectScale.y, modRandomWeightedItemComponent.InspectScale.z },

                    ItemNames = modRandomWeightedItemComponent.ItemNames?.Select(gear => gear.name).ToArray(),
                    modRandomWeightedItemComponent.ItemWeights
                },
                ModResearchComponent modResearchComponent => new
                {
                    modResearchComponent.DisplayNameLocalizationId,
                    modResearchComponent.DescriptionLocalizatonId,
                    modResearchComponent.InventoryActionLocalizationId,
                    modResearchComponent.WeightKG,
                    modResearchComponent.DaysToDecay,
                    modResearchComponent.MaxHP,
                    InitialCondition = modResearchComponent.InitialCondition.ToString(),
                    InventoryCategory = modResearchComponent.InventoryCategory.ToString(),
                    modResearchComponent.PickUpAudio,
                    modResearchComponent.PutBackAudio,
                    modResearchComponent.StowAudio,
                    modResearchComponent.WornOutAudio,
                    modResearchComponent.InspectOnPickup,
                    modResearchComponent.InspectDistance,
                    InspectAngles = new float[] { modResearchComponent.InspectAngles.x, modResearchComponent.InspectAngles.y, modResearchComponent.InspectAngles.z },
                    InspectOffset = new float[] { modResearchComponent.InspectOffset.x, modResearchComponent.InspectOffset.y, modResearchComponent.InspectOffset.z },
                    InspectScale = new float[] { modResearchComponent.InspectScale.x, modResearchComponent.InspectScale.y, modResearchComponent.InspectScale.z },

                    SkillType = modResearchComponent.SkillType.ToString(),
                    modResearchComponent.TimeRequirementHours,
                    modResearchComponent.SkillPoints,
                    modResearchComponent.NoBenefitAtSkillLevel,
                    ReadAudio = modResearchComponent.ReadAudio?.name ?? ""
                },
                ModGenericComponent modGenericComponent => new
                {
                    modGenericComponent.DisplayNameLocalizationId,
                    modGenericComponent.DescriptionLocalizatonId,
                    modGenericComponent.InventoryActionLocalizationId,
                    modGenericComponent.WeightKG,
                    modGenericComponent.DaysToDecay,
                    modGenericComponent.MaxHP,
                    InitialCondition = modGenericComponent.InitialCondition.ToString(),
                    InventoryCategory = modGenericComponent.InventoryCategory.ToString(),
                    PickUpAudio = modGenericComponent.PickUpAudio != null ? modGenericComponent.PickUpAudio.name : "",
                    PutBackAudio = modGenericComponent.PutBackAudio != null ? modGenericComponent.PutBackAudio.name : "",
                    StowAudio = modGenericComponent.StowAudio != null ? modGenericComponent.StowAudio.name : "",
                    WornOutAudio = modGenericComponent.WornOutAudio != null ? modGenericComponent.WornOutAudio.name : "",
                    modGenericComponent.InspectOnPickup,
                    modGenericComponent.InspectDistance,
                    InspectAngles = new float[] { modGenericComponent.InspectAngles.x, modGenericComponent.InspectAngles.y, modGenericComponent.InspectAngles.z },
                    InspectOffset = new float[] { modGenericComponent.InspectOffset.x, modGenericComponent.InspectOffset.y, modGenericComponent.InspectOffset.z },
                    InspectScale = new float[] { modGenericComponent.InspectScale.x, modGenericComponent.InspectScale.y, modGenericComponent.InspectScale.z },
                    NormalModel = modGenericComponent.NormalModel != null ? modGenericComponent.NormalModel.name : "",
                    InspectModel = modGenericComponent.InspectModel != null ? modGenericComponent.InspectModel.name : ""
                },
                ModAccelerantBehaviour modAccelerantBehaviour => new
                {
                    modAccelerantBehaviour.DestroyedOnUse,
                    modAccelerantBehaviour.DurationOffset,
                    modAccelerantBehaviour.SuccessModifier
                },
                ModBurnableBehaviour modBurnableBehaviour => new
                {
                    modBurnableBehaviour.BurningMinutes,
                    modBurnableBehaviour.BurningMinutesBeforeAllowedToAdd,
                    modBurnableBehaviour.SuccessModifier,
                    modBurnableBehaviour.TempIncrease,
                    modBurnableBehaviour.DurationOffset
                },
                ModCarryingCapacityBehaviour modCarryingCapacityBehaviour => new
                {
                    modCarryingCapacityBehaviour.MaxCarryCapacityKGBuff
                },
                ModEvolveBehaviour modEvolveBehaviour => new
                {
                    TargetItemName = modEvolveBehaviour.TargetItemName?.name ?? "",
                    modEvolveBehaviour.EvolveHours,
                    modEvolveBehaviour.IndoorsOnly
                },
                ModFireStarterBehaviour modFireStarterBehaviour => new
                {
                    modFireStarterBehaviour.DestroyedOnUse,
                    modFireStarterBehaviour.NumberOfUses,
                    OnUseSoundEvent = modFireStarterBehaviour.OnUseSoundEvent?.name ?? "",
                    modFireStarterBehaviour.RequiresSunLight,
                    modFireStarterBehaviour.RuinedAfterUse,
                    modFireStarterBehaviour.SecondsToIgniteTinder,
                    modFireStarterBehaviour.SecondsToIgniteTorch,
                    modFireStarterBehaviour.SuccessModifier
                },
                ModHarvestableBehaviour modHarvestableBehaviour => new
                {
                    Audio = modHarvestableBehaviour.Audio?.name ?? "",
                    modHarvestableBehaviour.Minutes,
                    modHarvestableBehaviour.YieldCounts,
                    YieldNames = modHarvestableBehaviour.YieldNames?.Select(gear => gear.name).ToArray(),
                    RequiredToolNames = modHarvestableBehaviour.RequiredToolNames?.Select(tools => tools.name).ToArray(),
                },
                ModMillableBehaviour modMillableBehaviour => new
                {
                    modMillableBehaviour.RepairDurationMinutes,
                    RepairRequiredGear = modMillableBehaviour.RepairRequiredGear?.Select(requiredGear => requiredGear.name).ToArray(),
                    modMillableBehaviour.RepairRequiredGearUnits,
                    modMillableBehaviour.CanRestoreFromWornOut,
                    modMillableBehaviour.RecoveryDurationMinutes,
                    RestoreRequiredGear = modMillableBehaviour.RestoreRequiredGear?.Select(restoreRequiredGear => restoreRequiredGear.name).ToArray(),
                    modMillableBehaviour.RestoreRequiredGearUnits,
                    modMillableBehaviour.Skill
                },
                ModRepairableBehaviour modRepairableBehaviour => new
                {
                    Audio = modRepairableBehaviour.Audio?.name ?? "",
                    modRepairableBehaviour.Minutes,
                    modRepairableBehaviour.Condition,
                    RequiredTools = modRepairableBehaviour.RequiredTools?.Select(requiredTools => requiredTools.name).ToArray(),
                    MaterialNames = modRepairableBehaviour.MaterialNames?.Select(gear => gear.name).ToArray(),
                    modRepairableBehaviour.MaterialCounts
                },
                ModScentBehaviour modScentBehaviour => new
                {
                    ScentCategory = modScentBehaviour.ScentCategory.ToString()
                },
                ModSharpenableBehaviour modSharpenableBehaviour => new
                {
                    Audio = modSharpenableBehaviour.Audio?.name ?? "",
                    modSharpenableBehaviour.MinutesMin,
                    modSharpenableBehaviour.MinutesMax,
                    modSharpenableBehaviour.ConditionMin,
                    modSharpenableBehaviour.ConditionMax,
                    Tools = modSharpenableBehaviour.Tools?.Select(tools => tools.name).ToArray(),
                },
                ModStackableBehaviour modStackableBehaviour => new
                {
                    modStackableBehaviour.SingleUnitTextId,
                    modStackableBehaviour.MultipleUnitTextId,
                    modStackableBehaviour.StackSprite,
                    modStackableBehaviour.UnitsPerItem,
                    modStackableBehaviour.ChanceFull,
                    ShareStackWithGear = modStackableBehaviour.ShareStackWithGear?.Select(gearStack => gearStack.name).ToArray(),
                    InstantiateStackItem = modStackableBehaviour.InstantiateStackItem?.name ?? "",
                    modStackableBehaviour.StackConditionDifferenceConstraint
                },
                ModTinderBehaviour modTinderBehaviour => new
                {
                    modTinderBehaviour.DurationOffset,
                    modTinderBehaviour.SuccessModifier
                },
                _ => component
            };
        }
    }
}